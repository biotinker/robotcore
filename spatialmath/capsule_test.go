package spatialmath

import (
	"testing"

	"github.com/golang/geo/r3"
	"go.viam.com/test"
)

func makeTestCapsule(o Orientation, pt r3.Vector, radius, length float64) Geometry {
	c, _ := NewCapsule(NewPose(pt, o), radius, length, "")
	return c
}

func TestCapsuleConstruction(t *testing.T) {
	c := makeTestCapsule(NewZeroOrientation(), r3.Vector{0, 0, 0.1}, 1, 6.75).(*capsule)
	test.That(t, c.segA.ApproxEqual(r3.Vector{0, 0, -2.275}), test.ShouldBeTrue)
	test.That(t, c.segB.ApproxEqual(r3.Vector{0, 0, 2.475}), test.ShouldBeTrue)
}

func TestBoxCapsuleCollision(t *testing.T) {
	pt := r3.Vector{-178.95551585002903, 15.388321162835881, -10.110465843295357}
	ov := &OrientationVectorDegrees{OX: -0.43716334939336904, OY: -0.3861114135400337, OZ: -0.812284545144919, Theta: -180}
	pose := NewPose(pt, ov)
	c, err := NewCapsule(pose, 65, 550, "")
	test.That(t, err, test.ShouldBeNil)

	box1Pt := r3.Vector{X: -450, Y: 0, Z: -266}
	box1, err := NewBox(NewPoseFromPoint(box1Pt), r3.Vector{X: 900, Y: 2000, Z: 100}, "")
	test.That(t, err, test.ShouldBeNil)

	col, err := c.CollidesWith(box1, defaultCollisionBufferMM)
	test.That(t, err, test.ShouldBeNil)
	test.That(t, col, test.ShouldBeTrue)

	dist, err := c.DistanceFrom(box1)
	test.That(t, err, test.ShouldBeNil)
	test.That(t, dist, test.ShouldAlmostEqual, -29.69, 1e-3)
}

func TestCapsuleIntersectWithPlane(t *testing.T) {
	c := makeTestCapsule(NewZeroOrientation(), r3.Vector{0, 0.1, 0.1}, 1, 16.75).(*capsule)
	points, err := CapsuleIntersectionWithPlane(c, r3.Vector{0, 1, 0}, r3.Vector{1, 0, 0}, 32)
	test.That(t, err, test.ShouldBeNil)

	expectedPoints := []r3.Vector{
		{1.000000000000000000000000, 0.100000000000000005551115, -8.275000000000000355271368},
		{1.000000000000000000000000, 0.100000000000000005551115, -5.882142857142858005659036},
		{1.000000000000000000000000, 0.100000000000000005551115, -3.489285714285714323779075},
		{1.000000000000000000000000, 0.100000000000000005551115, -1.096428571428571752122139},
		{1.000000000000000000000000, 0.100000000000000005551115, 1.296428571428571041579403},
		{1.000000000000000000000000, 0.100000000000000005551115, 3.689285714285714501414759},
		{1.000000000000000000000000, 0.100000000000000005551115, 6.082142857142856406937881},
		{1.000000000000000000000000, 0.100000000000000005551115, 8.474999999999999644728632},
		{1.000000000000000000000000, 0.100000000000000005551115, 8.474999999999999644728632},
		{0.939692620785908427905042, 0.100000000000000005551115, 8.132979856674330321197885},
		{0.766044443118978124473983, 0.100000000000000005551115, 7.832212390313459948743002},
		{0.500000000000000111022302, 0.100000000000000005551115, 7.608974596215561270184935},
		{0.173648177666930414453361, 0.100000000000000005551115, 7.490192246987791513390675},
		{-0.173648177666930303431059, 0.100000000000000005551115, 7.490192246987791513390675},
		{-0.499999999999999777955395, 0.100000000000000005551115, 7.608974596215560382006515},
		{-0.766044443118977902429378, 0.100000000000000005551115, 7.832212390313459948743002},
		{-0.939692620785908316882740, 0.100000000000000005551115, 8.132979856674330321197885},
		{-1.000000000000000000000000, 0.100000000000000005551115, 8.474999999999999644728632},
		{-1.000000000000000000000000, 0.100000000000000005551115, 6.082142857142856406937881},
		{-1.000000000000000000000000, 0.100000000000000005551115, 3.689285714285714501414759},
		{-1.000000000000000000000000, 0.100000000000000005551115, 1.296428571428571041579403},
		{-1.000000000000000000000000, 0.100000000000000005551115, -1.096428571428571752122139},
		{-1.000000000000000000000000, 0.100000000000000005551115, -3.489285714285714323779075},
		{-1.000000000000000000000000, 0.100000000000000005551115, -5.882142857142858005659036},
		{-1.000000000000000000000000, 0.100000000000000005551115, -8.275000000000000355271368},
		{-1.000000000000000000000000, 0.100000000000000005551115, -8.275000000000000355271368},
		{-0.939692620785908427905042, 0.100000000000000005551115, -8.617020143325669678802115},
		{-0.766044443118978124473983, 0.100000000000000005551115, -8.917787609686540051256998},
		{-0.500000000000000111022302, 0.100000000000000005551115, -9.141025403784439617993485},
		{-0.173648177666930414453361, 0.100000000000000005551115, -9.259807753012207598430905},
		{0.173648177666930303431059, 0.100000000000000005551115, -9.259807753012207598430905},
		{0.499999999999999777955395, 0.100000000000000005551115, -9.141025403784439617993485},
		{0.766044443118977902429378, 0.100000000000000005551115, -8.917787609686540051256998},
		{0.939692620785908316882740, 0.100000000000000005551115, -8.617020143325669678802115},
	}

	test.That(t, len(points), test.ShouldEqual, len(expectedPoints))

	for i, point := range points {
		test.That(t, point.ApproxEqual(expectedPoints[i]), test.ShouldBeTrue)
	}
}
